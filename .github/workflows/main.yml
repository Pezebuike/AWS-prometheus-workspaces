name: Deploy AWS Prometheus Infrastructure

on:
  # push:
  #   branches: [main]
  #   paths: ['**.tf', '**.yml', '**.yaml']
  # pull_request:
  #   branches: [main]
  #   paths: ['**.tf', '**.yml', '**.yaml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "eu-north-1"
  WORKING_DIRECTORY: "./module"

# Grant GITHUB_TOKEN permissions for OIDC
permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout code
  pull-requests: write  # Required to comment on PRs

jobs:
  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform fmt -check -recursive

      - name: Terraform Init (validation only)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # OIDC Authentication - No stored credentials needed!
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformPlan
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform plan \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
            -out=tfplan

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const planOutput = execSync('cd ${{ env.WORKING_DIRECTORY }} && terraform show -no-color tfplan', { encoding: 'utf8' });
            
            const output = `## ðŸ“‹ Terraform Plan Results
            
            <details><summary>ðŸ‘€ Show Plan</summary>
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            </details>
            
            **Action:** \`${{ github.event_name }}\` by @${{ github.actor }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-check
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.action == 'apply'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ðŸ”’ Same OIDC role, different session name
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformApply
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform apply \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
            -auto-approve

      - name: Save Outputs
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform output -json > terraform-outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ github.run_number }}
          path: ${{ env.WORKING_DIRECTORY }}/terraform-outputs.json

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: destruction
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ðŸ”’ Same OIDC role for destroy
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformDestroy
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform destroy \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
            -auto-approve